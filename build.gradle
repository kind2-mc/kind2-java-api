plugins {
  id 'com.palantir.git-version' version '0.12.3'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
}

group = 'edu.uiowa.cs.clc'
version = gitVersion()
ext.isReleaseVersion = version.matches("[0-9]+.[0-9]+.[0-9]+")

repositories {
  mavenCentral()
}

dependencies {
  implementation 'com.google.code.gson:gson:2.8.6'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

test {
  useJUnitPlatform()
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      pom {
        name = 'Kind 2 Java API'
        description = 'An API for constructing Lustre programs, running Kind 2, and showing results/suggestions.'
        url = 'https://github.com/kind2-mc/kind2-java-api'
        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://github.com/kind2-mc/kind2-java-api/blob/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'abdmohamed'
            name = 'Abdalrhman Mohamed'
            email = 'abdalrhman-mohamed@uiowa.edu'
          }
        }
        scm {
          connection = 'scm:git:https://github.com/kind2-mc/kind2-java-api.git'
          developerConnection = 'scm:git:ssh:github.com/kind2-mc/kind2-java-api.git'
          url = 'https://github.com/kind2-mc/kind2-java-api'
        }
      }
    }
  }

  repositories {
    maven {
      name = "OSSRH"
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv("MAVEN_USERNAME")
        password = System.getenv("MAVEN_PASSWORD")
      }
    }
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/kind2-mc/kind2-java-api"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.maven
}
